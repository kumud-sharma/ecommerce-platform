2.2 settings
===============

The 'settings.py' file in a Django project is the central configuration file where you define various settings and options for your Django application. This file includes settings related to your project's environment, database, security, installed applications, middleware, and more. Let's break down each section of the 'settings.py' file you provided and explain its content in detail.

***************************************************************************************************
	from pathlib import Path
	BASE_DIR = Path(__file__).resolve().parent.parent


	- Import   : 'Path' from the 'pathlib' module is used for file path operations.
	- BASE_DIR : This variable sets the base directory for the project, making it easier 
	             to reference file paths within the project.

***************************************************************************************************
Security and Debug Settings
----------------------------

	SECRET_KEY = 'django-insecure-8)4@efg#040z3hi-npy#qkucz+fcq(%qyp%%*vb4ygaq3b3f+6'

	DEBUG = True

	ALLOWED_HOSTS = []


	- SECRET_KEY    : A unique key used for cryptographic signing. 
	                  It should be kept secret in a production environment.
	- DEBUG         : If set to 'True', Django will display detailed error pages with debugging information. 
	                  This should be set to 'False' in production.
	- ALLOWED_HOSTS : A list of strings representing the host/domain names that this Django site can serve. 
	                  It should be configured with domain in production.
***************************************************************************************************
Application Definition
----------------------


	INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	]


	- INSTALLED_APPS: A list of all Django applications (both built-in and custom) that are activated in this Django instance.

***************************************************************************************************
Middleware Configuration
-------------------------

	MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	]


	- MIDDLEWARE: A list of middleware components that process requests and responses. 
	              Middleware can perform various tasks such as session management, authentication, and security enhancements.

***************************************************************************************************
URL Configuration
-----------------


	ROOT_URLCONF = 'myproject.urls'


	- ROOT_URLCONF: The  module that should be used as the URL configuration for this Django project. 
	                This module typically contains the URL patterns that route requests to views.

***************************************************************************************************
Templates Configuration
-----------------------


	TEMPLATES = [
	{
	'BACKEND': 'django.template.backends.django.DjangoTemplates',
	'DIRS': [],
	'APP_DIRS': True,
	'OPTIONS': {
	'context_processors': [
	'django.template.context_processors.debug',
	'django.template.context_processors.request',
	'django.contrib.auth.context_processors.auth',
	'django.contrib.messages.context_processors.messages',],
				},
			},
		]


	- TEMPLATES: A list of template engine configurations. 
	             This includes settings for the template engine backend, directories to search for templates,
	             and context processors that add variables to the context of every template.

***************************************************************************************************
WSGI Configuration
------------------


	WSGI_APPLICATION = 'myproject.wsgi.application'


	- WSGI_APPLICATION: The full  path to the WSGI application object that Django's built-in servers
	 (and some third-party servers) use to serve your project.

***************************************************************************************************
Database Configuration
-----------------------

	DATABASES = {
	'default': {
	'ENGINE': 'django.db.backends.sqlite3',
	'NAME': BASE_DIR / 'db.sqlite3',
	}
	}


	- DATABASES: A dictionary containing the settings for all databases to be used with this Django project. 
	             The default configuration uses SQLite, but this can be modified to use other 
	             database engines such as PostgreSQL, MySQL, etc.

***************************************************************************************************
Password Validation
-------------------


	AUTH_PASSWORD_VALIDATORS = [
	{
	'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
	'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
	'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
	'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
	]


	- AUTH_PASSWORD_VALIDATORS: A list of validators that are used to check the strength of user passwords. 
	                            These validators help ensure that passwords meet certain criteria for security.

***************************************************************************************************
Internationalization
--------------------

	LANGUAGE_CODE = 'en-us'
	TIME_ZONE = 'UTC'
	USE_I18N = True
	USE_TZ = True


	- LANGUAGE_CODE : The default language code for the project (e.g., 'en-us' for English - United States).
	- TIME_ZONE     : The default time zone for the project.
	- USE_I18N      : A boolean that specifies whether Django's translation system should be enabled.
	- USE_TZ        : A boolean that specifies whether Django should use timezone-aware datetimes.

***************************************************************************************************
Static Files Configuration
--------------------------

	STATIC_URL = 'static/'


	- STATIC_URL: The URL to use when referring to static files (e.g., CSS, JavaScript, images) in the templates. 
	              Itâ€™s a relative URL that refers to where static files are served from.

***************************************************************************************************
Default Primary Key Field Type
------------------------------

	DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


	- DEFAULT_AUTO_FIELD: The type of primary key field to use for models that don't specify one. 
	                      'BigAutoField' is an integer field that automatically increments and is suitable for most use cases.
