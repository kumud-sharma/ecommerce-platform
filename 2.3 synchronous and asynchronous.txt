2.3 Synchronous and Asynchronous Web Applications
=================================================
 I. Synchronous Web Applications
II. Asynchronous Web Applications


***************************************************************************************************
I. Synchronous Web Applications
-------------------------------

  Definition:
  -----------
    - Synchronous web applications process requests in a sequential manner. 
      This means each request is handled one at a time, and the server waits 
      for a request to complete before it starts processing the next one.

  How It Works:
  -------------
    1. Request Received : The server receives an HTTP request from a client (such as a web browser).
    2. Process Request  : The server processes the request. 
                          This may involve accessing a database, performing computations, or generating an HTML page.
    3. Response Sent    : Once the processing is complete, the server sends back an HTTP response to the client.
    4. Next Request     : Only after the response is sent, the server moves on to the next request.

  Example Scenario:
  -----------------
    A user submits a form on a website to retrieve some data from a database.

    1. User submits the form.
    2. The server receives the request and starts processing it.
    3. The server queries the database and waits for the result.
    4. Once the result is retrieved, the server sends the data back to the user.

    - During the processing of each request, other incoming requests must wait in a queue 
      until the current request is fully processed and responded to.

  Traditional E-commerce Website
  ------------------------------
    - A traditional e-commerce website, where each page request and form submission is processed 
      one after another, is a good example of a synchronous web application.

    Scenario:

    A user browses products.
    The user adds items to the cart and proceeds to checkout.
    The user submits an order form.
    The server processes the order, including payment verification and inventory update.

  Detailed Workflow:
  ------------------

  Browsing Products : Each time a user clicks on a product link, the server receives a request, 
                      retrieves product details from the database, and sends a response. 
                      The server handles one request at a time.
  Adding to Cart    : When a user adds a product to the cart, the server processes the request, 
                      updates the cart in the database, and then sends a confirmation response.
  Submitting Order  : During checkout, the server processes the payment and updates the inventory. 
                      The user waits until the server completes these tasks before receiving a confirmation.


***************************************************************************************************
II. Asynchronous Web Applications
---------------------------------

  Definition:
  -----------
    - Asynchronous web applications handle multiple requests concurrently. 
      Instead of waiting for each request to complete before starting the next one, 
      the server can start processing new requests while waiting for other 
      operations (like database queries or I/O operations) to complete.

  How It Works:
  -------------
    1. Request Received : The server receives an HTTP request from a client.
    2. Start Processing : The server begins processing the request.
    3. Await Operations : If the request requires operations that take time (like database queries), 
                          the server can pause (await) and move on to process other incoming requests.
    4. Handle Response  : Once the awaited operations complete, the server resumes processing and 
                          sends back a response to the client.

  Example Scenario:
  -----------------
    A user submits a form on a website to retrieve some data from a database.

    1. User submits the form.
    2. The server receives the request and starts processing it.
    3. The server queries the database and does not wait for the result.
    4. While waiting for the database query to complete, the server processes other incoming requests.
    5. Once the database query completes, the server sends the data back to the user.

    This allows the server to handle many requests simultaneously, making it more efficient in dealing with high traffic.


  Real-Time Chat Application
  ---------------------------

  A real-time chat application like Slack or Microsoft Teams is an excellent example of an asynchronous web application.

  Scenario:
  ---------
    - Multiple users send and receive messages in real time.
    - Users can upload files, which are processed and made available without blocking other operations.

  Detailed Workflow:
  ------------------
    Sending Messages   : Each message sent by a user is processed asynchronously, allowing multiple 
                         users to send messages concurrently without waiting for each other.
    Receiving Messages : The server pushes new messages to users as soon as they are received, without blocking.
    File Uploads       : Users upload files, which are processed in the background while other 
                         chat functionalities remain responsive.